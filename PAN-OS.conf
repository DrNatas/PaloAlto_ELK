# ***NOTE on PRUNE***
#  PA seems to add fields in pacthes and some fields do not apply to most environements
#  So the prune command eliminates all undefined fields and unneeded to store only what your envionment uses
#  If you want more fields than being stored, add them to the whitelist in the prune statement
#  This also eliminates the columnX in the created document

filter {
    if "PAN-OS_syslog" in [tags] {

        # Log types are "TRAFFIC", "THREAT", "CONFIG", "SYSTEM", "USERID" and "HIP-MATCH".
        # Traffic log fields: https://docs.paloaltonetworks.com/pan-os/10-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/traffic-log-fields.html
        #converted field names to CIM fields where possible, allows use of CIM Traffic visualitations and reports 

        if ([message] =~ /TRAFFIC/) {
            csv {
                source => "message"
                columns => ["FUTURE_USE","Receive_Time","Serial_Number","Type","Threat/Content_Type","FUTURE_USE","Generated_Time","Source_Address","Destination_Address",
                            "NAT_Source_IP","NAT_Destination_IP","Rule_Name","Source_User","Destination_User","Application","Virtual_System","Source_Zone","Destination_Zone",
                            "Inbound_Interface","Outbound_Interface","Log_Action","FUTURE_USE","Session_ID","Repeat_Count","Source_Port","Destination_Port","NAT_Source_Port",
                            "NAT_Destination_Port","Flags","Protocol","Action","Bytes","Bytes_Sent","Bytes_Received","Packets","Start_Time","Elapsed_Time","Category",
                            "FUTURE_USE","Sequence_Number","Action_Flags","Source_Country","Destination_Country","FUTURE_USE","Packets_Sent","Packets_Received",
                            "Session_End_Reason","Device_Group_Hierarchy_Level_1","Device_Group_Hierarchy_Level_2","Device_Group_Hierarchy_Level_3",
                            "Device_Group_Hierarchy_Level_4","Virtual_System_Name","Device_Name","Action_Source","Source_VM_UUID","Destination_VM_UUID","Tunnel_ID/IMSI",
                            "Monitor_Tag/IMEI","Parent_Session_ID","Parent_Start_Time","Tunnel_Type","SCTP_Association_ID","SCTP_Chunks","SCTP_Chunks_Sent","SCTP_Chunks_Received",
                            "Rule_UUID","HTTP/2_Connection","App_Flap_Count","Policy_ID","Link_Switches","SD-WAN_Cluster","SD-WAN_Device_Type","SD-WAN_Cluster_Type","SD-WAN_Site",
                            "Dynamic_User_Group_Name","XFF_Address","Source_Device_Category","Source_Device_Profile","Source_Device_Model","Source_Device_Vendor",
                            "Source_Device_OS_Family","Source_Device_OS_Version","Source_Hostname","Source_Mac_Address","Destination_Device_Category","Destination_Device_Profile",
                            "Destination_Device_Model","Destination_Device_Vendor","Destination_Device_OS_Family","Destination_Device_OS_Version","Destination_Hostname",
                            "Destination_Mac_Address","Container_ID","POD_Namespace","POD_Name","Source_External_Dynamic_List","Destination_External_Dynamic_List","Host_ID",
                            "Serial_Number","Source_Dynamic_Address_Group","Destination_Dynamic_Address_Group","Session_Owner","High_Resolution_Timestamp","A_Slice_Service_Type",
                            "A_Slice_Differentiator"]

            }
            # Most of the new fields in PANOS 10 are not enabled yet, so they are pruned, will add them to the whitelist as they become available
            # But note, default to is store the entire raw message so no data is lost as you can interogate the message field
            # Also, some fields like rule_uuid are pruned as rule name is avaiable.  If you need the UUID you can see it in the message field
#            prune {
#                interpolate => true
#                whitelist_names => ["@timestamp","message","receive_time","serial_number","log_type","content_type","generated_time","src_ip","Destination_Address","src_translated_ip",
#                                    "dest_translated_ip","rule","user","dest_user","app","virtual_system","src_zone","dest_zone","src_interface","dest_interface",
#                                    "log_profile","session_id","repeat_count","src_port","dest_port","src_translated_port","dest_translated_port","protocol",
#                                    "action","bytes","bytes_out","bytes_in","packets","start","elapsed_sec","category","seqno","action_flags","src_location",
#                                    "dest_location","packets_out","packets_in","session_end_reason","dvc_name","action_source","tunnelid","tunnel","http-2-connection"]
#                    }
#            # MUTATE TRATRIC
            mutate {
                convert => [ "Bytes", "integer" ]
                convert => [ "Bytes_Received", "integer" ]
                convert => [ "Bytes_Sent", "integer" ]
                convert => [ "Elapsed_Time", "integer" ]
                convert => [ "geoip.dma_code", "integer" ]
                convert => [ "geoip.latitude", "float" ]
                convert => [ "geoip.longitude", "float" ]
                convert => [ "Destination_Port", "integer" ]
                convert => [ "Source_Port", "integer" ]
                convert => [ "Packets", "integer" ]
                convert => [ "Packets_Received", "integer" ]
                convert => [ "Packets_Out", "integer" ]
                convert => [ "Sequence_Number", "integer" ]
                # ADD TAG TO MESSAGE
                add_tag => [ "PAN-OS_traffic"]
                # Original message has been fully parsed, so remove it.
                remove_field => [ "message" ]
            }
        }


        # Threat log fields: https://docs.paloaltonetworks.com/pan-os/10-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/threat-log-fields.html
        #converted field names to CIM fields where possible, allows use of CIM Traffic visualitations and reports 
        else if ([message] =~ /THREAT/) {
            csv {
                source => "message"
                columns => ["FUTURE_USE-1","receive_time","serial_number","log_type","content_type","FUTURE_USE-2","generated_time","src_ip","Destination_Address",
                            "src_translated_ip","dest_translated_ip","rule","user","dest_user","app","virtual_system","src_zone","dest_zone","src_interface",
                            "dest_interface","log_profile","FUTURE_USE-3","session_id","repeat_count","src_port","dest_port","src_translated_port",
                            "dest_translated_port","tcp_flag","protocol","action","threat_uri_name","threat_id","category","severity","direction","seqno","action_flags",
                            "src_location","dest_location","FUTURE_USE-4","contenttype","pcap_id","filedigest","cloud","url_idx","user_agent","filetype","xff","referer",
                            "sender","subject","recipient","reportid","dg_hier_level_1","dg_hier_level_2","dg_hier_level_3","dg_hier_level_4","virtual_system_name",
                            "dvc_name","FUTURE_USE-5","srv_vm_uuid","dest_vm_uuid","http_method","tunnelid","imei","parent_session_id","parent_start_time","tunnel",
                            "thr_catagory","contentver","FUTURE_USE-6","assoc_id","ppid","http_headers","url_catagory_list","rule_uuid","http-2-connection","dynusergroup_name"]
            }
            prune {
                    interpolate => true
                    whitelist_names => ["@timestamp","message","receive_time","serial_number","log_type","content_type","generated_time","src_ip","Destination_Address",
                                        "src_translated_ip","dest_translated_ip","rule","user","dest_user","app","virtual_system","src_zone","dest_zone","src_interface",
                                        "dest_interface","log_profile","session_id","repeat_count","src_port","dest_port","src_translated_port",
                                        "dest_translated_port","tcp_flag","protocol","action","threat_uri_name","threat_id","category","severity","direction","seqno","action_flags",
                                        "src_location","dest_location","contenttype","pcap_id","filedigest","cloud","url_idx","user_agent","filetype","xff","referer",
                                        "sender","subject","recipient","reportid","dvc_name","http_method","tunnelid","tunnel","thr_catagory","contentver","assoc_id",
                                        "ppid","http_headers","url_catagory_list","rule_uuid","http-2-connection","dynusergroup_name"]
                }   

                mutate {    
                    convert => [ "geoip.dma_code", "integer" ]
                    convert => [ "geoip.latitude", "float" ]
                    convert => [ "geoip.longitude", "float" ]
                    convert => [ "dest_translated_port", "integer" ]
                    convert => [ "src_translated_port", "integer" ]
                    convert => [ "SequenceNumber", "integer" ]

                    add_tag => ["PAN-OS_threat"]
                }

        }
        # ADDED USER ID
        else if ([message] =~ /USERID/) {
                    csv {
                            source  => "message"
                            columns => ["FUTURE_USER", "Receive Time", "Serial Number", "Type", "Threat/Content Type", "FUTURE_USE", "Generated Time", 
                                        "Virtual System", "Source IP", "User", "Data Source Name", "Event ID", "Repeat Count", "Time Out Threshold", 
                                        "Source Port", "Destination Port", "Data Source", "Data Source Type", "Sequence Number", "Action Flags", 
                                        "Device Group Hierarchy Level 1", "Device Group Hierarchy Level 2", "Device Group Hierarchy Level 3", 
                                        "Device Group Hierarchy Level 4", "Virtual System Name", "Device Name", "Virtual System ID", "Factor Type", 
                                        "Factor Completion Time", "Factor Number", "FUTURE_USE", "FUTURE_USE", "User Group Flags", "User by Source", "High Resolution Timestamp"]
                    }

        mutate { convert => [ "Sequence Number", "integer" ]
                 add_tag => [ "PAN-OS_USERID"]   }
        }
        
        # ADDED HIPMATCH
        # https://docs.paloaltonetworks.com/pan-os/10-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/user-id-log-fields
        else if ([message] =~ /HIPMATCH/) {
                    csv {
                            source => "message"
                            columns => [
                                            "FUTURE_USE", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "FUTURE_USE", "GeneratedTime", 
                                            "SourceUser", "VirtualSystem", "MachineName", "OperatingSystem", "SourceAddress", "HIP", "RepeatCount", 
                                            "HIPType", "FUTURE_USE", "FUTURE_USE", "Sequence Number", "ActionFlags", "DeviceGroupHierarchyLevel1", 
                                            "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3", "DeviceGroupHierarchyLevel4", 
                                            "VirtualSystemName", "DeviceName", "VirtualSystemID", "IPv6SourceAddress","HostID", "UserDeviceSerialNumber"
                                        ]
                        }


                    mutate { 
                        convert => [ "Sequence Number", "integer" ]
                        add_tag => [ "PAN-OS_HIP"]
                    }
            }

        # Config log fields:  https://docs.paloaltonetworks.com/pan-os/10-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/config-log-fields.html
        else if ([message] =~ /CONFIG/) {
            csv {
            source => "message"
            columns => ["FUTURE_USE","receive_time","serial_number","log_type","Subtype","FUTURE_USE","generated_time","src_ip","virtual_system",
                        "Command","Admin","Client","Result","Configuration Path","Before Change Detail","After Change Detail","seqno","action_flags",
                        "dg_hier_level_1","dg_hier_level_2","dg_hier_level_3","dg_hier_level_4","virtual_system_name","dvc_name"]
            }
            prune {
                    interpolate => true
                    whitelist_names => ["@timestamp","message","receive_time","serial_number","log_type","Subtype","generated_time","src_ip","virtual_system",
                                        "Command","Admin","Client","Result","Configuration Path","Before Change Detail","After Change Detail","seqno","action_flags","dvc_name"]
            }

            mutate {
                    add_tag => [ "PAN-OS_Config"]
                }
            }

        else if ([message] =~ /SYSTEM/) {
            csv {
            source => "message"
            columns => ["FUTURE_USE","receive_time","serial_number","log_type","Subtype","FUTURE_USE","generated_time","virtual_system","event_id",
                        "Object","FUTURE_USE","FUTURE_USE","Module","severity","Description","seqno","action_flags","dg_hier_level_1",
                        "dg_hier_level_2","dg_hier_level_3","dg_hier_level_4","virtual_system_name","dvc_name"]
            }
        prune {
                interpolate => true
                whitelist_names => ["@timestamp","message","receive_time","serial_number","log_type","Subtype","generated_time","virtual_system","event_id",
                                    "Object","Module","severity","Description","seqno","action_flags","dvc_name"]
                }

        if ([Description] =~ /DHCP lease started/) {
        grok {
            match => {"Description" => "%{IP:lease_ip} --> mac %{MAC:mac_address} - hostname %{WORD:src_name}" }
            add_tag => [ "DHCP_LEASE"]                     
            }
        }
                        

            mutate {
                    add_tag => [ "PAN-OS_System"]
                }
            }

        # ADDED GLOBAL PROTECT
        # https://docs.paloaltonetworks.com/pan-os/10-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/globalprotect-log-fields    
    	else if ([message] =~ /GLOBALPROTECT/) {
    		csv {
    			source => "message"
    			columns => ["FUTURE_USE", "Receive_Time", "Serial Number", "Type", "Threat/Content Type", "FUTURE_USE", "Generated_Time", "Virtual_System", 
                            "Event_ID", "Stage", "Authentication_Method", "Tunnel_Type", "Source_User", "Source_Region", "Machine_Name", "Public_IP", 
                            "Public_IPv6", "Private_IP", "Private_IPv6", "Host_ID", "Serial_Number", "Client_Version", "Client_OS", "Client_OS_Version", 
                            "Repeat_Count", "Reason", "Error", "Description", "Status", "Location", "Login_Duration", "Connect_Method", "Error_Code", "Portal", 
                            "Sequence_Number", "Action_Flags", "High_Res_Timestamp", "Selection_Type", "Response_Time", "Priority", "Attempted_Gateways", "Gateway"]
    		}
    		mutate {
    			copy => { "Description" => "gpt_field" }
    		}
    		#grok {
    		#	match => { "tmp_field1" => "GlobalProtect (?<GlobalProtect.Action>[^\.]*)\. %{GREEDYDATA:tmp_field2}" }
    		#}
    		kv {
    			source => "gpt_field"
    			target => "Desc"
    			trim_key => " "
    			trim_value => " ."
    			field_split => ","
    			value_split => ":"
    		}
    		mutate {
    			remove_field => ["gpt_field"]
    		}
    		if [Public_IP] and [Public_IP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
    			geoip {
    				source => "Public_IP"
    				target => "GeoIP"
    			}
    		}

    		mutate { add_tag => [ "PAN-OS_GLOBALPROTECT"] }
    		mutate { rename => [ "[host]", "[host][name]"] }
    	}
    
    	mutate {
    		# Original message has been fully parsed, so remove it.
    		remove_field => [ "message" ]
    	}

  #  If your firewall is subject to any audits or PCI compliance, then you must leave the orginal RAW message in the logs 
  #  so leave this section commented out.  If not, you can uncomment this mutate section as you do not need the unparsed 
  #  raw log to be in each document.
  #
  #      mutate {
  #          # Original message has been fully parsed, so remove it.
  #          remove_field => [ "message" ]
  #      }

        # Geolocate logs that have src_ip and it is a non-RFC1918 address
        if [src_ip] and [src_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
               source => "src_ip"
               target => "src_geoip"
          }

            # Delete 0,0 in src_geo.location if equal to 0,0
            if ([src_geoip.location] and [src_geoip.location] =~ "0,0") {
                mutate {
                    replace => [ "src_geoip.location", "" ]
                }
            }
        }

        # Geolocate logs that have Destination_Address and if that Destination_Address is a non-RFC1918 address
        if [Destination_Address] and [Destination_Address] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "Destination_Address"
                target => "dest_geoip"
            }
      
            # Delete 0,0 in dest_geoip.location if equal to 0,0
            if ([dest_geoip.location] and [dest_geoip.location] =~ "0,0") {
                mutate {
                    replace => [ "dest_geoip.location", "" ]
                }
            }
        }

        # Takes the 5-tuple of source address, source port, destination address, destination port, and protocol and does a SHA1 hash to fingerprint the flow.  This is a useful
        # way to be able to do top N terms queries on flows, not just on one field.
        if [src_ip] and [Destination_Address] {
            fingerprint {
                concatenate_sources => true
                method => "SHA1"
                key => "logstash"
                source => [ "src_ip", "src_port", "Destination_Address", "dest_port", "protocol" ]
            }
        }
        
        #Resolve IP address to names.  The DNS filter can be a performance issue is receing over 400 requstes per second.
        #Do not use Logstash DNS Filter Cache parameters, it forces a single thread process regaurdless of how many workers you have
        #For best performance, install dnsmasq on the logstash server
        #Make sure your dnsmasq points to an internal DNS to resolve local RFC1918 addresses
        if [src_ip] {
            mutate {
                add_field => { "src_name" => "%{src_ip}" }
            }   
            dns {
                reverse => [ "src_name"] 
                action => "replace"
                nameserver => [ "127.0.0.1" ]

            }     
       }        
       if [Destination_Address] {
            mutate {
                add_field => { "dest_name" => "%{Destination_Address}" }
            }   
            dns {
                reverse => [ "dest_name"] 
                action => "replace"
                nameserver => [ "127.0.0.1" ]

            }     
       }        

    }
}