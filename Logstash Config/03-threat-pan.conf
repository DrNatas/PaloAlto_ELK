# This code will parse all threat logs

filter {
    if "PAN-OS_syslog" in [tags] {
        # ADDED USER ID  
        if ([message] =~ /THREAT/) {
            csv {

                # USAGE OF 10.1 edition
                # https://docs.paloaltonetworks.com/pan-os/10-1/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/traffic-log-fields
                source => "message"
                columns => ["Format", "FUTURE_USE", "Receive_Time", "Serial_Number", "Type", "Threat_Content_Type", "FUTURE_USE", "Generated_Time", "Source_Address", "Destination_Address", "NAT_Source_IP", 
                            "NAT_Destination_IP", "Rule_Name", "Source_User", "Destination_User", "Application", "Virtual_System", "Source_Zone", "Destination_Zone", "Inbound_Interface", "Outbound_Interface", 
                            "Log_Action", "FUTURE_USE", "Session_ID", "Repeat_Count", "Source_Port", "Destination_Port", "NAT_Source_Port", "NAT_Destination_Port", "Flags", "Protocol", "Action", "Bytes", 
                            "Bytes_Sent", "Bytes_Received", "Packets", "Start_Time", "Elapsed_Time", "Category", "FUTURE_USE", "Sequence_Number", "Action_Flags", "Source_Country", "Destination_Country", 
                            "FUTURE_USE", "Packets_Sent", "Packets_Received", "Session_End_Reason", "Device_Group_Hierarchy_Level_1", "Device_Group_Hierarchy_Level_2", "Device_Group_Hierarchy_Level_3", 
                            "Device_Group_Hierarchy_Level_4", "Virtual_System_Name", "Device_Name", "Action_Source", "Source_VM_UUID", "Destination_VM_UUID", "Tunnel_ID_IMSI", "Monitor_Tag_IMEI", "Parent_Session_ID", 
                            "Parent_Start_Time", "Tunnel_Type", "SCTP_Association_ID", "SCTP_Chunks", "SCTP_Chunks_Sent", "SCTP_Chunks_Received", "Rule_UUID", "HTTP_2_Connection", "App_Flap_Count", 
                            "Policy_ID", "Link_Switches", "SD_WAN_Cluster", "SD_WAN_Device_Type", "SD_WAN_Cluster_Type", "SD_WAN_Site", "Dynamic_User_Group_Name", "XFF_Address", "Source_Device_Category", 
                            "Source_Device_Profile", "Source_Device_Model", "Source_Device_Vendor", "Source_Device_OS_Family", "Source_Device_OS_Version", "Source_Hostname", "Source_Mac_Address", 
                            "Destination_Device_Category", "Destination_Device_Profile", "Destination_Device_Model", "Destination_Device_Vendor", "Destination_Device_OS_Family", "Destination_Device_OS_Version", 
                            "Destination_Hostname", "Destination_Mac_Address", "Container_ID", "POD_Namespace", "POD_Name", "Source_External_Dynamic_List", "Destination_External_Dynamic_List", "Host_ID", "Serial_Number", 
                            "Source_Dynamic_Address_Group", "Destination_Dynamic_Address_Group", "Session_Owner", "High_Resolution_Timestamp", "A_Slice_Service_Type", "A_Slice_Differentiator", "Application_Subcategory", 
                            "Application_Category", "Application_Technology", "Application_Risk", "Application_Characteristic", "Application_Container", "Tunneled_Application", "Application_SaaS", "Application_Sanctioned_State", "Offloaded"]
            }

            mutate {
                convert      => [ "geoip.dma_code", "integer" ]
                convert      => [ "geoip.latitude", "float" ]
                convert      => [ "geoip.longitude", "float" ]
                # GET DOMAIN NAME
                convert      => [ "geoip.ip", "integer"]
                # ASN NUMBER ADDED
                convert      => [ "geoip.asn", "integer"]
                # ORGANIZATION ADDED
                convert      => [ "geoip.organization", "string"]
                convert      => [ "Destination_Port", "integer" ]
                convert      => [ "Source_Port", "integer" ]
                convert      => [ "Sequence_Number", "integer" ]
                # ADD TAG TO MESSAGE
                add_tag      => [ "PAN-OS_Threat"]
                # Original message has been fully parsed, so remove it.
                remove_field => [ "message" ]
                remove_field => ["Sequence_Number"]
                remove_field => ["event"]
                remove_field => ["Generated_Time"]
                remove_field => ["Start_Time"]
                remove_field => ["Received_Time"]
                remove_field => ["XFF_Address"] 
                rename       => ["Bytes", "Threat_or_Content_Name"]
                rename       => ["Action", "URL"]
                remove_tag   => ["PAN-OS_syslog"]
            }

            # Resolve IP address to names.  The DNS filter can be a performance issue is receing over 400 requstes per second.
            # Do not use Logstash DNS Filter Cache parameters, it forces a single thread process regaurdless of how many workers you have
            # For best performance, install dnsmasq on the logstash server
            # Make sure your dnsmasq points to an internal DNS to resolve local RFC1918 addresses
            if [Source_Address] {
                mutate {
                    add_field => { "source_ip_resolved" => "%{Source_Address}" }
                }   
                dns {
                    reverse        => [ "source_ip_resolved"] 
                    action         => "replace"
                    add_field      => { "dns_lookup" => "%{[source_ip_resolved]}" }
                    hit_cache_size => 4096
                    # Your own private DNS SERVERS should go here
                    nameserver     => [ "10.121.11.5", "10.121.11.8" ]
                    timeout        => 1
                }     
            }        
            if [Destination_Address] {
                    mutate {
                        add_field => { "Destination_Name" => "%{Destination_Address}" }
                    }   
                    dns {
                        reverse        => [ "Destination_Name"] 
                        action         => "replace"
                        add_field      => { "dns_lookup" => "%{[Destination_Name]}" }
                        hit_cache_size => 4096
                        nameserver     => [ "10.121.11.5", "10.121.11.8" ]
                        timeout        => 1                        
                    }   
            } 


            # Non-RFC1918 address only, will skip all 127.0.0.1, 10.0.0.0/8, 172.16.0.0/16 192.168.0.0/24
            if [Source_Address] and [Source_Address] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
                geoip {
                    source => "Source_Address"
                    target => "Geographical_Source"
                }
                #Delete 0,0 in Geographical_Source.location if equal to 0,0
                if ([Geographical_Source.location] and [Geographical_Source.location] =~ "0,0") {
                    mutate {
                    replace => [ "Geographical_Source.location", "" ]
                    }
                }
            }

            # Non-RFC1918 address only, will skip all 127.0.0.1, 10.0.0.0/8, 172.16.0.0/16 192.168.0.0/24
            if [Destination_Address] and [Destination_Address] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
                geoip {
                    source => "Destination_Address"
                    target => "Geographical_Destination."
                }
            # Delete 0,0 in Geographical_Destination.location if equal to 0,0
            if ([Geographical_Destination.location] and [Geographical_Destination.location] =~ "0,0") {
                mutate { replace => [ "Destination_Address.location", "" ] }
                }
            }

        }
    }
}