filter {
    if "PAN-OS_syslog" in [tags] {
            # Log types are "TRAFFIC"
            # Traffic log fields: https://docs.paloaltonetworks.com/pan-os/10-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/traffic-log-fields.html
            # converted field names to CIM fields where possible, allows use of CIM Traffic visualitations and reports 

            if ([message] =~ /TRAFFIC/) {
                csv {
                    source => "message"
                    columns => ["FUTURE_USE","Receive_Time","Serial_Number","Type","Threat_Content_Type","FUTURE_USE","Generated_Time","Source_Address","Destination_Address",
                                "NAT_Source_IP","NAT_Destination_IP","Rule_Name","Source_User","Destination_User","Application","Virtual_System","Source_Zone","Destination_Zone",
                                "Inbound_Interface","Outbound_Interface","Log_Action","FUTURE_USE","Session_ID","Repeat_Count","Source_Port","Destination_Port","NAT_Source_Port",
                                "NAT_Destination_Port","Flags","Protocol","Action","Bytes","Bytes_Sent","Bytes_Received","Packets","Start_Time","Elapsed_Time","Category",
                                "FUTURE_USE","Sequence_Number","Action_Flags","Source_Country","Destination_Country","FUTURE_USE","Packets_Sent","Packets_Received",
                                "Session_End_Reason","Device_Group_Hierarchy_Level_1","Device_Group_Hierarchy_Level_2","Device_Group_Hierarchy_Level_3",
                                "Device_Group_Hierarchy_Level_4","Virtual_System_Name","Device_Name","Action_Source","Source_VM_UUID","Destination_VM_UUID","Tunnel_ID_IMSI",
                                "Monitor_Tag_IMEI","Parent_Session_ID","Parent_Start_Time","Tunnel_Type","SCTP_Association_ID","SCTP_Chunks","SCTP_Chunks_Sent","SCTP_Chunks_Received",
                                "Rule_UUID","HTTP_2_Connection","App_Flap_Count","Policy_ID","Link_Switches","SD-WAN_Cluster","SD-WAN_Device_Type","SD-WAN_Cluster_Type","SD-WAN_Site",
                                "Dynamic_User_Group_Name","XFF_Address","Source_Device_Category","Source_Device_Profile","Source_Device_Model","Source_Device_Vendor",
                                "Source_Device_OS_Family","Source_Device_OS_Version","Source_Hostname","Source_Mac_Address","Destination_Device_Category","Destination_Device_Profile",
                                "Destination_Device_Model","Destination_Device_Vendor","Destination_Device_OS_Family","Destination_Device_OS_Version","Destination_Hostname",
                                "Destination_Mac_Address","Container_ID","POD_Namespace","POD_Name","Source_External_Dynamic_List","Destination_External_Dynamic_List","Host_ID",
                                "Source_Dynamic_Address_Group","Destination_Dynamic_Address_Group","Session_Owner","High_Resolution_Timestamp","A_Slice_Service_Type",
                                "A_Slice_Differentiator"]
                }
                
                        # MUTATE TRAFFIC
                mutate {
                                        convert => {
                                     "Bytes"                       => "integer"
                                     "Bytes_Sent"                  => "integer"
                                     "Elapsed_Time"                => "integer"
                                     "Destination_Port"            => "integer"
                                     "Source_Port"                 => "integer"
                                     "Packets"                     => "integer"
                                     "Packets_Received"            => "integer"
                                     "Packets_Sent"                => "integer"
                                     "Sequence_Number"             => "integer"
                                     "Session_ID"                  => "integer"
                                     "Repeat_Count"                => "integer"
                                     "NAT_Source_Port"             => "integer"
                                     "NAT_Destination_Port"        => "integer"
                                     "Start_Time"                  => "integer"
                                     "Tunnel_ID_IMSI"              => "integer"
                                     "Monitor_Tag_IMEI"            => "integer"
                                     "Parent_Session_ID"           => "integer"
                                     "Parent_Start_Time"           => "integer"
                                     "SCTP_Association_ID"         => "integer"
                                     "SCTP_Chunks"                 => "integer"
                                     "SCTP_Chunks_Sent"            => "integer"
                                     "SCTP_Chunks_Received"        => "integer"
                                     "Policy_ID"                   => "integer"
                                     "Link_Switches"               => "integer"
                                     "Host_ID"                     => "integer"
                                     "A_Slice_Service_Type"        => "integer"
                                     "A_Slice_Differentiator"      => "integer"
                  }
                    add_tag => [ "PAN-OS_Traffic"]
                    remove_field => [ "message", "High_Resolution_Timestamp", "Sequence_Number", "event", "Source_Country","Rule_UUID", "Virtual_System" ]
                    remove_tag => ["PAN-OS_syslog"]    
                }   
   
                                # Geolocate logs that have dest_ip and if that dest_ip is a non-RFC1918 address
                # Non-RFC1918 address only, will skip all 127.0.0.1, 10.0.0.0/8, 172.16.0.0/16 192.168.0.0/24
                        if [Source_Address] and [Source_Address] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
                    geoip {
                        source                => "Source_Address"
                        target                => "SourceGeoIP"
                        #default_database_type => "ASN"
                        tag_on_failure        => []
                    }   

                        # Delete 0,0 in dest_geoip.location if equal to 0,0
                        if ([SourceGeoIP.location] and [SourceGeoIP.location] =~ "0,0") {
                            mutate {
                                replace => [ "SourceGeoIP.location", "" ]
                            }
                        }
                        }
    

                # Non-RFC1918 address only, will skip all 127.0.0.1, 10.0.0.0/8, 172.16.0.0/16 192.168.0.0/24
                        if [Destination_Address] and [Destination_Address] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
                        geoip {
                            source                => "Destination_Address"
                            target                                => "DestinationGeoIP"
                            #default_database_type => "ASN"
                            tag_on_failure        => []
                        }
                                # Delete 0,0 in dest_geoip.location if equal to 0,0
                                if ([DestinationGeoIP.location] and [DestinationGeoIP.location] =~ "0,0") {
                                    mutate {
                                        replace => [ "DestinationGeoIP.location", "" ]
                                    }
                                }
                        }
    
                                # Added tags for multicast, broadcast, internal_destination, and external_destination
                # Non-RFC1918 address only, will skip all 127.0.0.1, 10.0.0.0/8, 172.16.0.0/16 192.168.0.0/24
                                if [Destination_Address] =~ "2(?:2[4-9]|3\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d?|0)){3}" {
                                        mutate {
                                                add_tag => [ "multicast" ]
                                        }
                                }

                                if [Destination_Address] == "255.255.255.255" {
                                        mutate {
                                                add_tag => [ "broadcast" ]
                                    }
                                }

                                if [Destination_Address] and "multicast" not in [tags] and "broadcast" not in [tags] {
                              if [Destination_Address] =~ /^10\.|^192\.168\.|^172\.(1[6-9]|2[0-9]|3[0-1])\./ {
                                mutate {
                                  add_tag => [ "internal_destination" ]
                          }
                        } else {
                          mutate {
                            add_tag => [ "external_destination" ]
                          }
                         }
                       }

                                # GeoIP tests
                                if ([SourceGeoIP.location][lat] and [SourceGeoIP.location][lon]) {
                                    mutate {
                                        add_field => { "[SourceGeo][location]" => "%{[SourceGeoIP.location][lat]},%{[SourceGeoIP.location][lon]}" }
                                    }
                                }

                                if ([DestinationGeoIP.location][lat] and [DestinationGeoIP.location][lon]) {
                                    mutate {
                                        #add_field => { "[DestinationGeo][location]" => "%{[DestinationGeoIP.location][lat]},%{[DestinationGeoIP.location][lon]}" }
                                        add_field => { "[DestinationGeo][location]" => "%{[DestinationGeoIP.geo.location.lat]},%{[DestinationGeoIP.geo.location.lon]}" }
                                    }
                                }

                                # Resolve IP address to names using DNS lookup
                                # Note: Performance considerations apply (see original comments)
                                if [Source_Address] {
                                    mutate {
                                        add_field => { "source_ip_resolved" => "%{Source_Address}" }
                                    }
                                    dns {
                                        reverse        => ["source_ip_resolved"]
                                        action         => "replace"
                                        hit_cache_size => 4096
                                        nameserver     => ["10.121.11.5", "10.121.11.8"]
                                        timeout        => 1
                                    }
                                }

                                if [Destination_Address] {
                                    mutate {
                                        add_field => { "destination_ip_resolved" => "%{Destination_Address}" }
                                    }
                                    dns {
                                        reverse        => ["destination_ip_resolved"]
                                        action         => "replace"
                                        hit_cache_size => 4096
                                        nameserver     => ["10.121.11.5", "10.121.11.8"]
                                        timeout        => 1
                                    }
                                }


                ruby {
                    code => "
                        event.to_hash.each do |palofield, fieldvalue|
                            event.remove(palofield) if fieldvalue.nil?
                        end
                    "
                }
        }
    }
}